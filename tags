Accept	csapp.c	/^int Accept(int s, struct sockaddr *addr, socklen_t/
Alarm	csapp.c	/^unsigned int Alarm(unsigned int seconds) {$/
Bind	csapp.c	/^void Bind(int sockfd, struct sockaddr *my_addr, in/
Calloc	csapp.c	/^void *Calloc(size_t nmemb, size_t size) $/
Close	csapp.c	/^void Close(int fd) $/
Connect	csapp.c	/^void Connect(int sockfd, struct sockaddr *serv_add/
Dup2	csapp.c	/^int Dup2(int fd1, int fd2) $/
Execve	csapp.c	/^void Execve(const char *filename, char *const argv/
Fclose	csapp.c	/^void Fclose(FILE *fp) $/
Fdopen	csapp.c	/^FILE *Fdopen(int fd, const char *type) $/
Fgets	csapp.c	/^char *Fgets(char *ptr, int n, FILE *stream) $/
Fopen	csapp.c	/^FILE *Fopen(const char *filename, const char *mode/
Fork	csapp.c	/^pid_t Fork(void) $/
Fputs	csapp.c	/^void Fputs(const char *ptr, FILE *stream) $/
Fread	csapp.c	/^size_t Fread(void *ptr, size_t size, size_t nmemb,/
Free	csapp.c	/^void Free(void *ptr) $/
Fstat	csapp.c	/^void Fstat(int fd, struct stat *buf) $/
Fwrite	csapp.c	/^void Fwrite(const void *ptr, size_t size, size_t n/
Gethostbyaddr	csapp.c	/^struct hostent *Gethostbyaddr(const char *addr, in/
Gethostbyname	csapp.c	/^struct hostent *Gethostbyname(const char *name) $/
Getpgrp	csapp.c	/^pid_t Getpgrp(void) {$/
Kill	csapp.c	/^void Kill(pid_t pid, int signum) $/
Listen	csapp.c	/^void Listen(int s, int backlog) $/
Lseek	csapp.c	/^off_t Lseek(int fildes, off_t offset, int whence) /
Madder	adder.c	/^int main(void) {$/
Malloc	csapp.c	/^void *Malloc(size_t size) $/
Mclient	client.c	/^int main(int argc, char **argv) {$/
Mechoseveri	echoseveri.c	/^int main(int argc, char **argv) {$/
Mmap	csapp.c	/^void *Mmap(void *addr, size_t len, int prot, int f/
Mproxy	proxy.c	/^int main(int argc, char **argv)$/
Mtiny	tiny.c	/^int main(int argc, char **argv) {$/
Munmap	csapp.c	/^void Munmap(void *start, size_t length) $/
Open	csapp.c	/^int Open(const char *pathname, int flags, mode_t m/
Open_clientfd	csapp.c	/^int Open_clientfd(char *hostname, int port) $/
Open_listenfd	csapp.c	/^int Open_listenfd(int port) $/
P	csapp.c	/^void P(sem_t *sem) $/
Pause	csapp.c	/^void Pause() $/
Pthread_cancel	csapp.c	/^void Pthread_cancel(pthread_t tid) {$/
Pthread_create	csapp.c	/^void Pthread_create(pthread_t *tidp, pthread_attr_/
Pthread_detach	csapp.c	/^void Pthread_detach(pthread_t tid) {$/
Pthread_exit	csapp.c	/^void Pthread_exit(void *retval) {$/
Pthread_join	csapp.c	/^void Pthread_join(pthread_t tid, void **thread_ret/
Pthread_once	csapp.c	/^void Pthread_once(pthread_once_t *once_control, vo/
Pthread_self	csapp.c	/^pthread_t Pthread_self(void) {$/
Read	csapp.c	/^ssize_t Read(int fd, void *buf, size_t count) $/
Realloc	csapp.c	/^void *Realloc(void *ptr, size_t size) $/
Rio_readinitb	csapp.c	/^void Rio_readinitb(rio_t *rp, int fd)$/
Rio_readlineb	csapp.c	/^ssize_t Rio_readlineb(rio_t *rp, void *usrbuf, siz/
Rio_readn	csapp.c	/^ssize_t Rio_readn(int fd, void *ptr, size_t nbytes/
Rio_readnb	csapp.c	/^ssize_t Rio_readnb(rio_t *rp, void *usrbuf, size_t/
Rio_writen	csapp.c	/^void Rio_writen(int fd, void *usrbuf, size_t n) $/
SA	csapp.h	/^typedef struct sockaddr SA;$/
Select	csapp.c	/^int Select(int  n, fd_set *readfds, fd_set *writef/
Sem_init	csapp.c	/^void Sem_init(sem_t *sem, int pshared, unsigned in/
Setpgid	csapp.c	/^void Setpgid(pid_t pid, pid_t pgid) {$/
Setsockopt	csapp.c	/^void Setsockopt(int s, int level, int optname, con/
Sigaddset	csapp.c	/^void Sigaddset(sigset_t *set, int signum)$/
Sigdelset	csapp.c	/^void Sigdelset(sigset_t *set, int signum)$/
Sigemptyset	csapp.c	/^void Sigemptyset(sigset_t *set)$/
Sigfillset	csapp.c	/^void Sigfillset(sigset_t *set)$/
Sigismember	csapp.c	/^int Sigismember(const sigset_t *set, int signum)$/
Signal	csapp.c	/^handler_t *Signal(int signum, handler_t *handler) /
Sigprocmask	csapp.c	/^void Sigprocmask(int how, const sigset_t *set, sig/
Sleep	csapp.c	/^unsigned int Sleep(unsigned int secs) $/
Socket	csapp.c	/^int Socket(int domain, int type, int protocol) $/
Stat	csapp.c	/^void Stat(const char *filename, struct stat *buf) /
V	csapp.c	/^void V(sem_t *sem) $/
Wait	csapp.c	/^pid_t Wait(int *status) $/
Waitpid	csapp.c	/^pid_t Waitpid(pid_t pid, int *iptr, int options) $/
Write	csapp.c	/^ssize_t Write(int fd, const void *buf, size_t coun/
app_error	csapp.c	/^void app_error(char *msg) \/* application error */
clienterror	tiny.c	/^void clienterror(int fd, char *cause,  char *errnu/
dns_error	csapp.c	/^void dns_error(char *msg) \/* dns-style error *\/$/
doit	tiny.c	/^void doit (int fd)  {$/
echo	echo.c	/^void echo(int connfd) {$/
format_log_entry	proxy.c	/^void format_log_entry(char *logstring, struct sock/
get_filetype	tiny.c	/^void get_filetype(char *filename, char *filetype) /
handler_t	csapp.h	/^typedef void handler_t(int);$/
open_clientfd	csapp.c	/^int open_clientfd(char *hostname, int port) $/
open_listenfd	csapp.c	/^int open_listenfd(int port) $/
parse_uri	proxy.c	/^int parse_uri(char *uri, char *hostname, char *pat/
posix_error	csapp.c	/^void posix_error(int code, char *msg) \/* posix-st/
read_requesthdrs	tiny.c	/^void read_requesthdrs(rio_t *rp) {$/
rio_read	csapp.c	/^static ssize_t rio_read(rio_t *rp, char *usrbuf, s/
rio_readinitb	csapp.c	/^void rio_readinitb(rio_t *rp, int fd) $/
rio_readlineb	csapp.c	/^ssize_t rio_readlineb(rio_t *rp, void *usrbuf, siz/
rio_readn	csapp.c	/^ssize_t rio_readn(int fd, void *usrbuf, size_t n) /
rio_readnb	csapp.c	/^ssize_t rio_readnb(rio_t *rp, void *usrbuf, size_t/
rio_t	csapp.h	/^} rio_t;$/
rio_writen	csapp.c	/^ssize_t rio_writen(int fd, void *usrbuf, size_t n)/
serve_dynamic	tiny.c	/^void serve_dynamic(int fd, char *filename, char *c/
serve_static	tiny.c	/^void serve_static(int fd, char *filename, int file/
unix_error	csapp.c	/^void unix_error(char *msg) \/* unix-style error */
